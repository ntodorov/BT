#BlueJ class context
comment0.params=
comment0.target=BinaryTree()
comment0.text=\r\n\ Creates\ an\ empty\ binary\ tree.\r\n
comment1.params=element
comment1.target=BinaryTree(java.lang.Object)
comment1.text=\r\n\ Creates\ a\ binary\ tree\ with\ the\ specified\ element\ as\ its\ root.\r\n\ @param\ element\ the\ object\ to\ store\ in\ the\ root\ node\r\n
comment10.params=
comment10.target=int\ size()
comment10.text=\r\n\ Returns\ the\ number\ of\ elements\ in\ this\ binary\ tree.\r\n\ \r\n\ @return\ the\ number\ of\ elements\ in\ this\ binary\ tree\r\n
comment11.params=
comment11.target=boolean\ isEmpty()
comment11.text=\r\n\ Determines\ if\ tree\ contains\ any\ nodes\r\n\ \r\n\ @return\ true\ if\ no\ nodes\ in\ tree,\ else\ false\r\n
comment12.params=
comment12.target=boolean\ isLeaf()
comment12.text=\r\n\ Determines\ if\ tree\ is\ simply\ a\ leaf\r\n\ \r\n\ @return\ true\ if\ no\ nodes\ in\ tree,\ else\ false\r\n
comment13.params=
comment13.target=java.util.Iterator\ inorder()
comment2.params=element\ left\ right
comment2.target=BinaryTree(java.lang.Object,\ BinaryTree,\ BinaryTree)
comment2.text=\r\n\ Creates\ a\ binary\ tree\ with\ the\ two\ specified\ subtrees.\r\n\ @param\ element\ the\ object\ to\ store\ in\ the\ root\ node\r\n\ @param\ left\ the\ left\ subtree\ that\ should\ come\ off\ the\ root\ node\r\n\ @param\ right\ the\ right\ subtree\ that\ should\ come\ off\ the\ root\ node\r\n
comment3.params=
comment3.target=java.lang.Object\ getRootElement()
comment3.text=\r\n\ Returns\ the\ element\ stored\ in\ the\ root\ of\ the\ tree.\r\n\ \r\n\ @return\ the\ element\ stored\ in\ the\ root\ of\ the\ tree\r\n\ @throws\ RuntimeException\ if\ the\ tree\ is\ empty\r\n
comment4.params=value
comment4.target=void\ setRootElement(java.lang.Object)
comment4.text=\r\n\ Sets\ the\ element\ stored\ in\ the\ root\ of\ the\ tree.\r\n\ \r\n\ @param\ value\ the\ object\ to\ store\ in\ the\ root\r\n\ @throws\ RuntimeException\ if\ the\ tree\ is\ empty\r\n
comment5.params=newLeft
comment5.target=void\ setLeft(BinaryTree)
comment5.text=\r\n\ Sets\ left\ subtree\ of\ the\ root\ of\ the\ tree.\r\n\ \r\n\ @param\ newLeft\ the\ tree\ which\ is\ to\ become\ the\ left\ subtree\ of\ the\ root\r\n\ @throws\ RuntimeException\ if\ the\ tree\ is\ empty\r\n
comment6.params=newRight
comment6.target=void\ setRight(BinaryTree)
comment6.text=\r\n\ Sets\ the\ right\ subtree\ of\ the\ root\ of\ the\ tree.\r\n\ \r\n\ @param\ newRight\ the\ tree\ which\ is\ to\ become\ the\ right\ subtree\ of\ the\ root\r\n\ @throws\ RuntimeException\ if\ the\ tree\ is\ empty\r\n
comment7.params=
comment7.target=java.util.Iterator\ iterator()
comment7.text=\r\n\ Satisfies\ the\ Iterable\ interface\ using\ an\ inorder\ traversal.\r\n\ \r\n
comment8.params=
comment8.target=BinaryTree\ getLeft()
comment8.text=\r\n\ Returns\ the\ left\ subtree\ of\ the\ root\ of\ this\ tree.\r\n\ \r\n\ @return\ the\ left\ subtree\ of\ the\ root\ of\ this\ tree.\r\n\ @throws\ RuntimeException\ if\ the\ tree\ is\ empty\r\n
comment9.params=
comment9.target=BinaryTree\ getRight()
comment9.text=\r\n\ Returns\ the\ right\ subtree\ of\ the\ root\ of\ this\ tree.\r\n\ \r\n\ @return\ the\ right\ subtree\ of\ the\ root\ of\ this\ tree.\r\n\ @throws\ RuntimeException\ if\ the\ tree\ is\ empty\r\n
numComments=14
